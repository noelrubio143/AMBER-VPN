#!/bin/bash

# Connection Check Script with TUI

# Default values
DOMAIN="www.google.com"
NAMESERVER="8.8.8.8"
INTERVAL=5
LOG_FILE="connection_log.txt"

# Color definitions
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
WHITE='\033[0;37m'
NC='\033[0m'

# Function to check connection and get latency
check_connection() {
  # Get current time
  current_time=$(date +%H:%M:%S)
  timestamp=$(date +%Y-%m-%d_%H:%M:%S) #For logging purposes

  # Use dig +stats to get detailed statistics, including query time
  dig_output=$(dig +stats "$DOMAIN" @"$NAMESERVER" 2>&1)

  # Extract the query time from the output
  latency=$(echo "$dig_output" | grep "Query time:" | awk '{print $4}')

  # Check if latency is empty or contains error
  if [[ -z "$latency" || "$latency" == *"SERVFAIL"* ]]; then
    output="[Time: $current_time] [Status: failed] [Latency: N/A]"
    echo -e "${RED}$output${NC}"
    echo "[$timestamp]$output" >> "$LOG_FILE" # Log to file
    return
  fi

  # Output the latency in milliseconds with custom format and color
  output="[Time: $current_time] [Status: connected] [Latency: ${latency} ms]"
  echo -e "${GREEN}$output${NC}"
  echo "[$timestamp]$output" >> "$LOG_FILE" # Log to file
}

# Function to display the main menu
show_menu() {
  clear
  echo -e "${YELLOW}Connection Monitor Configuration${NC}"
  echo -e "=================================="

  echo -e "${GREEN}Domain Management (Current: $DOMAIN)${NC}"
  echo -e "  ${BLUE}1. Add${NC}"
  echo -e "  ${YELLOW}2. Edit${NC}"
  echo -e "  ${RED}3. Remove${NC}"
  echo -e "${GREEN}Nameserver Management (Current: $NAMESERVER)${NC}"
  echo -e "  ${BLUE}4. Add${NC}"
  echo -e "  ${YELLOW}5. Edit${NC}"
  echo -e "  ${RED}6. Remove${NC}"
  echo -e "${WHITE}Other Operation:${NC}"
  echo -e "  ${MAGENTA}7. Custom intervals (Current: $INTERVAL seconds)${NC}"
  echo -e "  ${CYAN}8. Launch dig command on loop${NC}"
  echo -e "  ${RED}9. Exit${NC}"

  echo -e "=================================="
  echo "Enter your choice (1-9): "
}

# Function to add a domain
add_domain() {
  read -p "Enter new domain address: " new_domain
  DOMAIN="$new_domain"
  echo "Domain address added: $DOMAIN"
}

# Function to edit the domain
edit_domain() {
  read -p "Enter new domain address: " new_domain
  DOMAIN="$new_domain"
  echo "Domain address edited to: $DOMAIN"
}

# Function to remove the domain
remove_domain() {
  DOMAIN="www.google.com"
  echo "Domain address removed (set to default: www.google.com)"
}

# Function to add a nameserver
add_nameserver() {
  read -p "Enter new nameserver address: " new_nameserver
  NAMESERVER="$new_nameserver"
  echo "Nameserver address added: $NAMESERVER"
}

# Function to edit the nameserver
edit_nameserver() {
  read -p "Enter new nameserver address: " new_nameserver
  NAMESERVER="$new_nameserver"
  echo "Nameserver address edited to: $NAMESERVER"
}

# Function to remove the nameserver
remove_nameserver() {
  NAMESERVER="8.8.8.8"
  echo "Nameserver address removed (set to default: 8.8.8.8)"
}

# Function to set custom intervals
set_custom_interval() {
  read -p "Enter new monitoring interval (in seconds): " new_interval
  if [[ "$new_interval" =~ ^[0-9]+$ ]]; then
    INTERVAL="$new_interval"
    echo "Monitoring interval set to $INTERVAL seconds"
  else
    echo "Invalid interval. Using default interval (5 seconds)"
    INTERVAL=5
  fi
}

# Clear the screen and move cursor to top-left
printf '\033[H\033[2J'

# Main loop for the menu
while true; do
  show_menu
  read choice

  case $choice in
    1)
      add_domain
      ;;
    2)
      edit_domain
      ;;
    3)
      remove_domain
      ;;
    4)
      add_nameserver
      ;;
    5)
      edit_nameserver
      ;;
    6)
      remove_nameserver
      ;;
    7)
      set_custom_interval
      ;;
    8)
      clear
      echo "Launching dig command on loop..."
      while true; do
        check_connection
        sleep "$INTERVAL"
      done
      ;;
    9)
      echo "Exiting..."
      exit 0
      ;;
    *)
      echo "Invalid choice. Please enter a number between 1 and 9."
      ;;
  esac
  sleep 2 # Add a small delay before redisplaying the menu
done